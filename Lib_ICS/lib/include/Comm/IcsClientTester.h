#pragma once

#include "Comm/IcsClient.h"

namespace lt
{
	class LTICS_LIB_CLASS CIcsClientTester final : public CIcsClient
	{
	public:
		CIcsClientTester();
		CIcsClientTester(const CIcsClientTester &) = delete;
		~CIcsClientTester();

		CIcsClientTester & operator=(const CIcsClientTester &) = delete;

		//////////////////////////////////////////////////////////////////////////////////
		// System setting
		ModelEventNotifier<CIcsClientTester> &
			GetModelEventNotifier();
		//
		//////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////
		// Operation
		uint32 CommandTestResult(const STestResult & testResult,
								 uint64 timeout);
		//
		//////////////////////////////////////////////////////////////////////////////////

	private:
		//////////////////////////////////////////////////////////////////////////////////
		// System setting
		bool ProcRequestModel(const DataCntr & dataCntr,
							  DataCntr & resultDataCntr);

		bool RaiseModelEvent(ModelArgs::Args & args);
		//
		//////////////////////////////////////////////////////////////////////////////////

	private:
		//////////////////////////////////////////////////////////////////////////////////
		// System setting
		using ModelEventNotifierImpl =
			CCancellableEventNotifier<CIcsClientTester, ModelArgs>;

		ModelEventNotifierImpl * m_pModelEventNotifier = nullptr;
		//
		//////////////////////////////////////////////////////////////////////////////////
	};
}
